export declare const signatureTemplate = "/** \n  * Generated by nuxt-typed-router. Do not modify \n  * */";
export declare const staticDeclImports = "\nimport type {\n  NavigationFailure,\n  RouteLocation,\n  RouteLocationNormalized,\n  RouteLocationNormalizedLoaded,\n  RouteLocationOptions,\n  RouteQueryAndHash,\n  Router,\n} from 'vue-router';\n";
export declare const staticDeclarations = "\n  type TypedRouteParamsStructure = {\n    [K in TypedRouteList]: Record<string, string | number> | never;\n  };\n  \n  type TypedLocationAsRelativeRaw<T extends TypedRouteList> = {\n    name?: T;\n    params?: TypedRouteParams[T];\n  };\n  \n  type TypedRouteLocationRaw<T extends TypedRouteList> = RouteQueryAndHash &\n    TypedLocationAsRelativeRaw<T> &\n    RouteLocationOptions;\n  \n  interface TypedRouter {\n    /**\n     * Remove an existing route by its name.\n     *\n     * @param name - Name of the route to remove\n     */\n    removeRoute(name: TypedRouteList): void;\n    /**\n     * Checks if a route with a given name exists\n     *\n     * @param name - Name of the route to check\n     */\n    hasRoute(name: TypedRouteList): boolean;\n    /**\n     * Returns the {@link RouteLocation | normalized version} of a\n     * {@link RouteLocationRaw | route location}. Also includes an `href` property\n     * that includes any existing `base`. By default the `currentLocation` used is\n     * `route.currentRoute` and should only be overriden in advanced use cases.\n     *\n     * @param to - Raw route location to resolve\n     * @param currentLocation - Optional current location to resolve against\n     */\n    resolve<T extends TypedRouteList>(\n      to: TypedRouteLocationRaw<T>,\n      currentLocation?: RouteLocationNormalizedLoaded\n    ): RouteLocation & {\n      href: string;\n    };\n    /**\n     * Programmatically navigate to a new URL by pushing an entry in the history\n     * stack.\n     *\n     * @param to - Route location to navigate to\n     */\n    push<T extends TypedRouteList>(\n      to: TypedRouteLocationRaw<T>\n    ): Promise<NavigationFailure | void | undefined>;\n    /**\n     * Programmatically navigate to a new URL by replacing the current entry in\n     * the history stack.\n     *\n     * @param to - Route location to navigate to\n     */\n    replace<T extends TypedRouteList>(\n      to: TypedRouteLocationRaw<T>\n    ): Promise<NavigationFailure | void | undefined>;\n  }\n  \n  declare module 'nuxt3/dist/app/nuxt' {\n    export interface NuxtApp {\n      $typedRouter: TypedRouter\n    }\n  }\n\n  declare module '@vue/runtime-core' {\n    interface ComponentCustomProperties {\n      $typedRouter: TypedRouter\n    }\n  }\n  declare module 'nuxt-typed-router' {\n    export declare const useTypedRouter: () => {\n      router: TypedRouter,\n      routes: RouteListDecl\n    };\n  }\n  ";
