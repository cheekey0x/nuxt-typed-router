import { NuxtPage } from '@nuxt/schema';
import { moduleOptionStore } from '../config';

/** Will check if the is a route generated by @nuxtjs/i18n */
export function hasi18nSibling(
  source: Array<Record<string, any> & { name?: string; path: string }>,
  route: NuxtPage
) {
  const { i18n, i18nOptions } = moduleOptionStore;
  if (i18n && i18nOptions?.strategy !== 'no_prefix') {
    const separator = i18nOptions?.routesNameSeparator ?? '___';

    return source.some((rt) => {
      return (
        route.name?.match(new RegExp(`^(${rt.name})${separator}[a-zA-Z]+`, 'g')) ||
        (rt.path !== '/' &&
          route.path?.match(new RegExp(`/?[${i18nOptions?.locales?.join('|')}]${rt.path}`, 'g')))
      );
    });
  }
  return false;
}

export function modifyRoutePrefixDefaultIfI18n(route: NuxtPage) {
  const { i18n, i18nOptions } = moduleOptionStore;
  if (i18n && route.name) {
    const separator = i18nOptions?.routesNameSeparator ?? '___';
    if (i18nOptions?.strategy === 'prefix_and_default') {
      const routeDefaultRegXp = new RegExp(
        `([a-zA-Z-]+)${separator}[a-zA-Z]+${separator}default`,
        'g'
      );
      const match = routeDefaultRegXp.exec(route.name);
      if (match) {
        const [_, routeName] = match;
        route.name = routeName;
      }
    } else if (i18nOptions?.strategy === 'prefix_except_default') {
      const defaultLocale = i18nOptions.defaultLocale;
      const routeDefaultNameRegXp = new RegExp(`^([a-zA-Z-]+)${separator}${defaultLocale}`, 'g');
      const match = routeDefaultNameRegXp.exec(route.name);
      if (match) {
        const [_, routeName] = match;
        route.name = routeName;
      }
    }
  }
}
