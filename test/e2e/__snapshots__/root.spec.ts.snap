// Vitest Snapshot v1

exports[`Init route file > should generate to correct tree for the pages folder 1`] = `
"// @ts-nocheck
// eslint-disable
/**
 * ---------------------------------------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------------------------------------
 * */

export const routesNames = {
  activate: 'activate' as const,
  index: 'index' as const,
  parentFooBar: 'parent-foo-bar' as const,
  childOne: {
    childOneChildOneSubOne: 'parent-child-one-child-one-sub-one' as const,
    user: { index: 'parent-child-one-child-one-sub-one-user' as const },
    childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two' as const,
    index: 'parent-child-one' as const,
  },
  childTwo: {
    childTwoId: 'parent-child-two-id' as const,
    childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one' as const,
    index: 'parent-child-two' as const,
    profile: {
      id: {
        slug: {
          idSlugArticles: 'parent-child-two-profile-id-slug-articles' as const,
          index: 'parent-child-two-profile-id-slug' as const,
        },
        index: 'parent-child-two-profile-id' as const,
      },
      index: 'parent-child-two-profile' as const,
    },
  },
  parentTestOptional: 'parent-test-optional' as const,
  rootPage: 'rootPage' as const,
};

export type TypedRouteList =
  | 'activate'
  | 'index'
  | 'parent-foo-bar'
  | 'parent-child-one-child-one-sub-one'
  | 'parent-child-one-child-one-sub-one-user'
  | 'parent-child-one-child-one-sub-two'
  | 'parent-child-one'
  | 'parent-child-two-id'
  | 'parent-child-two-child-one-sub-one'
  | 'parent-child-two'
  | 'parent-child-two-profile-id-slug-articles'
  | 'parent-child-two-profile-id-slug'
  | 'parent-child-two-profile-id'
  | 'parent-child-two-profile'
  | 'parent-test-optional'
  | 'rootPage';

export type RouteListDecl = {
  activate: 'activate';
  index: 'index';
  parentFooBar: 'parent-foo-bar';
  childOne: {
    childOneChildOneSubOne: 'parent-child-one-child-one-sub-one';
    user: { index: 'parent-child-one-child-one-sub-one-user' };
    childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two';
    index: 'parent-child-one';
  };
  childTwo: {
    childTwoId: 'parent-child-two-id';
    childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one';
    index: 'parent-child-two';
    profile: {
      id: {
        slug: {
          idSlugArticles: 'parent-child-two-profile-id-slug-articles';
          index: 'parent-child-two-profile-id-slug';
        };
        index: 'parent-child-two-profile-id';
      };
      index: 'parent-child-two-profile';
    };
  };
  parentTestOptional: 'parent-test-optional';
  rootPage: 'rootPage';
};

/**
 * Routes params are only required for the exact targeted route name,
 * vue-router behaviour allow to navigate between children routes without the need to provide all the params every time.
 * So we can't enforce params when navigating between routes, only a \`[xxx].vue\` page will have required params in the type definition
 *
 *
 * */

export type TypedRouteParams = {
  activate: never;
  index: never;
  'parent-foo-bar': {
    foo: string | number;
    bar?: string | number;
  };
  'parent-child-one-child-one-sub-one': never;
  'parent-child-one-child-one-sub-one-user': never;
  'parent-child-one-child-one-sub-two': never;
  'parent-child-one': never;
  'parent-child-two-id': {
    id: string | number;
  };
  'parent-child-two-child-one-sub-one': never;
  'parent-child-two': never;
  'parent-child-two-profile-id-slug-articles': {
    id?: string | number;
    slug?: string | number;
  };
  'parent-child-two-profile-id-slug': {
    id?: string | number;
    slug: string | number;
  };
  'parent-child-two-profile-id': {
    id: string | number;
  };
  'parent-child-two-profile': never;
  'parent-test-optional': {
    optional?: string | number;
  };
  rootPage: never;
};

export type TypedRouteNamedMapper =
  | { name: 'activate' }
  | { name: 'index' }
  | {
      name: 'parent-foo-bar';
      params: {
        foo: string | number;
        bar?: string | number;
      };
    }
  | { name: 'parent-child-one-child-one-sub-one' }
  | { name: 'parent-child-one-child-one-sub-one-user' }
  | { name: 'parent-child-one-child-one-sub-two' }
  | { name: 'parent-child-one' }
  | {
      name: 'parent-child-two-id';
      params: {
        id: string | number;
      };
    }
  | { name: 'parent-child-two-child-one-sub-one' }
  | { name: 'parent-child-two' }
  | {
      name: 'parent-child-two-profile-id-slug-articles';
      params?: {
        id?: string | number;
        slug?: string | number;
      };
    }
  | {
      name: 'parent-child-two-profile-id-slug';
      params: {
        id?: string | number;
        slug: string | number;
      };
    }
  | {
      name: 'parent-child-two-profile-id';
      params: {
        id: string | number;
      };
    }
  | { name: 'parent-child-two-profile' }
  | {
      name: 'parent-test-optional';
      params?: {
        optional?: string | number;
      };
    }
  | { name: 'rootPage' };

export type ResolvedTypedRouteNamedMapper = {
  name: TypedRouteList;
  params: unknown;
} & (
  | { name: 'activate' }
  | { name: 'index' }
  | {
      name: 'parent-foo-bar';
      params: {
        foo: string | number;
        bar?: string | number;
      };
    }
  | { name: 'parent-child-one-child-one-sub-one' }
  | { name: 'parent-child-one-child-one-sub-one-user' }
  | { name: 'parent-child-one-child-one-sub-two' }
  | { name: 'parent-child-one' }
  | {
      name: 'parent-child-two-id';
      params: {
        id: string | number;
      };
    }
  | { name: 'parent-child-two-child-one-sub-one' }
  | { name: 'parent-child-two' }
  | {
      name: 'parent-child-two-profile-id-slug-articles';
      params: {
        id: string | number;
        slug: string | number;
      };
    }
  | {
      name: 'parent-child-two-profile-id-slug';
      params: {
        id: string | number;
        slug: string | number;
      };
    }
  | {
      name: 'parent-child-two-profile-id';
      params: {
        id: string | number;
      };
    }
  | { name: 'parent-child-two-profile' }
  | {
      name: 'parent-test-optional';
      params: {
        optional?: string | number;
      };
    }
  | { name: 'rootPage' }
);
"
`;

exports[`Init route file > should generate to correct tree for the pages folder 2`] = `
"// @ts-nocheck
// eslint-disable
/**
 * ---------------------------------------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------------------------------------
 * */

import type {
  NavigationFailure,
  RouteLocation,
  RouteLocationNormalizedLoaded,
  RouteLocationOptions,
  RouteQueryAndHash,
  RouteLocationRaw,
  Router,
} from 'vue-router';
import type { DefineComponent } from 'vue';
import type { NuxtLinkProps } from '#app';
import type {
  TypedRouteList,
  TypedRouteNamedMapper,
  TypedRouteParams,
  ResolvedTypedRouteNamedMapper,
} from './__routes';

// Type utils
type ExtractRequiredParameters<T extends Record<string, any>> = Pick<
  T,
  { [K in keyof T]: undefined extends T[K] ? never : K }[keyof T]
>;

type HasOneRequiredParameter<T extends TypedRouteList> = [TypedRouteParams[T]] extends [never]
  ? false
  : [keyof ExtractRequiredParameters<TypedRouteParams[T]>] extends [undefined]
  ? false
  : true;

type TypedLocationAsRelativeRaw<T extends TypedRouteList> = {
  name?: T;
} & ([TypedRouteParams[T]] extends [never]
  ? {}
  : HasOneRequiredParameter<T> extends false
  ? { params?: TypedRouteParams[T] }
  : { params: TypedRouteParams[T] });

type ResolvedTypedLocationAsRelativeRaw<T extends TypedRouteList> = {
  name?: T;
} & ([TypedRouteParams[T]] extends [never] ? {} : { params: Required<TypedRouteParams[T]> });

type TypedRouteLocationRaw = RouteQueryAndHash & TypedRouteNamedMapper & RouteLocationOptions;

type _TypedRoute = Omit<RouteLocationNormalizedLoaded, 'name' | 'params'> &
  ResolvedTypedRouteNamedMapper;
type _TypedNamedRoute<T extends TypedRouteList> = Omit<
  RouteLocationNormalizedLoaded,
  'name' | 'params'
> &
  ResolvedTypedLocationAsRelativeRaw<T>;

/** Augmented Router interface */
interface _TypedRouter
  extends Omit<Router, 'removeRoute' | 'hasRoute' | 'resolve' | 'push' | 'replace'> {
  /**
   * Remove an existing route by its name.
   *
   * @param name - Name of the route to remove
   */
  removeRoute(name: TypedRouteList): void;
  /**
   * Checks if a route with a given name exists
   *
   * @param name - Name of the route to check
   */
  hasRoute(name: TypedRouteList): boolean;
  /**
   * Returns the {@link RouteLocation | normalized version} of a
   * {@link RouteLocationRaw | route location}. Also includes an \`href\` property
   * that includes any existing \`base\`. By default the \`currentLocation\` used is
   * \`route.currentRoute\` and should only be overriden in advanced use cases.
   *
   * @param to - Raw route location to resolve
   * @param currentLocation - Optional current location to resolve against
   */
  resolve(
    to: TypedRouteLocationRaw,
    currentLocation?: RouteLocationNormalizedLoaded
  ): RouteLocation & {
    href: string;
  };
  /**
   * Programmatically navigate to a new URL by pushing an entry in the history
   * stack.
   *
   * @param to - Route location to navigate to
   */
  push(to: TypedRouteLocationRaw): Promise<NavigationFailure | void | undefined>;
  /**
   * Programmatically navigate to a new URL by replacing the current entry in
   * the history stack.
   *
   * @param to - Route location to navigate to
   */
  replace(to: TypedRouteLocationRaw): Promise<NavigationFailure | void | undefined>;
}

export interface TypedRouter extends _TypedRouter {}
export type TypedRoute = _TypedRoute;
export type TypedNamedRoute<T extends TypedRouteList> = _TypedNamedRoute<T>;

declare global {
  export interface TypedRouter extends _TypedRouter {}
  export type TypedRoute = _TypedRoute;
  export type TypedNamedRoute<T extends TypedRouteList> = _TypedNamedRoute<T>;
}

type TypedNuxtLinkProps = Omit<NuxtLinkProps, 'to'> & {
  to: string | (Omit<Exclude<RouteLocationRaw, string>, 'name'> & TypedRouteNamedMapper);
};

type _NuxtLink = DefineComponent<
  TypedNuxtLinkProps,
  {},
  {},
  import('vue').ComputedOptions,
  import('vue').MethodOptions,
  import('vue').ComponentOptionsMixin,
  import('vue').ComponentOptionsMixin,
  {},
  string,
  import('vue').VNodeProps &
    import('vue').AllowedComponentProps &
    import('vue').ComponentCustomProps,
  Readonly<TypedNuxtLinkProps>,
  {}
>;

declare module '@vue/runtime-core' {
  export interface GlobalComponents {
    NuxtLink: _NuxtLink;
  }
}
"
`;

exports[`Init route file > should generate to correct tree for the pages folder 3`] = `
"// @ts-nocheck
// eslint-disable
/**
 * ---------------------------------------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------------------------------------
 * */

import { useRouter } from '#app';
import { TypedRouter } from './typed-router';

/** Returns instances of $typedRouter and $routesList fully typed to use in your components or your Vuex/Pinia store
 *
 * @exemple
 *
 * \`\`\`ts
 * const { router, routes } = useTypedRouter();
 * \`\`\`
 */
export function useTypedRouter(): TypedRouter {
  const router = useRouter();

  return router;
}
"
`;

exports[`Init route file > should generate to correct tree for the pages folder 4`] = `
"// @ts-nocheck
// eslint-disable
/**
 * ---------------------------------------------------
 * ðŸš—ðŸš¦ Generated by nuxt-typed-router. Do not modify !
 * ---------------------------------------------------
 * */

import { defineNuxtPlugin } from '#app';

export default defineNuxtPlugin(() => {
  const router = useRouter();
  const route = useRoute();
  const routesNames = {
    activate: 'activate',
    index: 'index',
    parentFooBar: 'parent-foo-bar',
    childOne: {
      childOneChildOneSubOne: 'parent-child-one-child-one-sub-one',
      user: { index: 'parent-child-one-child-one-sub-one-user' },
      childOneChildOneSubTwo: 'parent-child-one-child-one-sub-two',
      index: 'parent-child-one',
    },
    childTwo: {
      childTwoId: 'parent-child-two-id',
      childTwoChildOneSubOne: 'parent-child-two-child-one-sub-one',
      index: 'parent-child-two',
      profile: {
        id: {
          slug: {
            idSlugArticles: 'parent-child-two-profile-id-slug-articles',
            index: 'parent-child-two-profile-id-slug',
          },
          index: 'parent-child-two-profile-id',
        },
        index: 'parent-child-two-profile',
      },
    },
    parentTestOptional: 'parent-test-optional',
    rootPage: 'rootPage',
  };

  return {
    provide: {
      typedRouter: router as TypedRouter,
      typedRoute: route as TypedRoute,
      routesNames,
    },
  };
});
"
`;
